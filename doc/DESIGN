Following is the current design:

1. reciever.cpp : This class is responsible to multicast connection handling to get data feeds. it contains async_data_reader  and message_processor.

2. async_data_reader.cpp: This is a wrapper class written on boost::asio::io_service with its own dedicated thread to handle the work.

3. message_processer.cpp: This class handle incoming data messages from multicast and notify producer which further share them with relvant subscribers

4. publisher.cpp: This class contains the subscription information of each client and based on the subscription shares with all the subscribers.

5. tcp_sender.cpp: contains session and sever which listens and notifies to downstream client

6. async_data_writer.cpp: This is a wrapper class written on boost::asio::io_service with its own dedicated thread to handle the work.


Threads behaviour:
thread 1 is listening for multicast data feeds and publishes the data on boost::lockfree::queue and calls the notification function.
thread 2  is listening for clients connection and subscribes the new connection.
Main thread after creation of two threads(thread 1 and thread 2) calls publisher::observer function and waits for notfication from thread 1 that data has been pushed in boost::lockfree::queue. After notification it loops through all the subscription present and sends data to availiable connection 


NOTE
++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1. Many simplifcation has been made based on available time, design has been squeezed to acheieve the desire functional behaviour.

Some point which were elimnated
 a. Data structure to store trade_statistics and market depth instrument wise has not been created on assumption it is serving for 1 instrument.
 b. Subscription mechanism of clients are put into place, However unsubscription is not implementes as of now.
 c. No recovery mechanism is put into place. Data is assumed to be coming from single channel and No arbitration is put into place.


